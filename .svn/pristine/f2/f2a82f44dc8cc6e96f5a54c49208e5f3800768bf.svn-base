package msgrouter.engine.socket.server.impl;

import java.io.IOException;
import java.nio.channels.SelectionKey;

import msgrouter.admin.server.AuthEntryAdmin;
import msgrouter.api.QueueEntry;
import msgrouter.api.SocketConnection;
import msgrouter.api.interfaces.Message;
import msgrouter.api.interfaces.bean.Loginer;
import msgrouter.api.interfaces.bean.SentTrigger;
import msgrouter.engine.MessageLogger;
import msgrouter.engine.MsgRouter;
import msgrouter.engine.SessionContext;
import msgrouter.engine.socket.NioUtil;
import msgrouter.engine.socket.server.AbstractServerSession;
import elastic.util.queue.QueueTimeoutException;
import elastic.util.util.TechException;

public class ServerSession extends AbstractServerSession {
	private SocketConnection conn;

	private volatile QueueEntry sendQE = null;
	private QueueEntry recvQE = null;

	public ServerSession(SessionContext ssContext, SocketConnection conn,
			Loginer loginer) {
		super(ssContext, loginer, ServerSession.class);

		this.conn = conn;
	}

	public void run() {
		try {
			execInitializer();
			startCronjob();
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}

	public boolean isBusy() {
		return recvQE == null || sendQE == null;
	}

	private volatile boolean kill = false;

	public void killEventHandler() {
		if (kill) {
			return;
		}
		kill = true;

		super.killEventHandler();

		if (conn != null) {
			conn.close();
			conn = null;
			if (logInfoEnabled())
				logInfo("closed connection.");

			AuthEntryAdmin aeAdmin = getService().getAuthEntryAdmin();
			aeAdmin.setOffLine(getLoginId());
		}

		SelectionKey selKey = getSelectionKey();
		if (selKey != null) {
			if (logTraceEnabled())
				logTrace("canceling " + NioUtil.infoOf(selKey));
			selKey.cancel();
		}
	}

	public SocketConnection getSocketConnection() {
		return conn;
	}

	public void handleRecvMessage(Message msg) throws TechException,
			QueueTimeoutException {
		if (logDebugEnabled()) {
			String log = MessageLogger.toDebugingLog("recv", this, msg);
			if (log != null)
				logDebug(log);
		}

		recvQE = new QueueEntry();
		recvQE.addMessage(msg);

		putRQ(recvQE);
		recvQE = null;
	}

	public Message recv() throws IOException {
		try {
			return conn.getRecver().recv();
		} catch (IOException e) {
			logError(e);
			throw e;
		} catch (Throwable t) {
			logError(t);
			throw new RuntimeException(t);
		}
	}

	public void send() throws IOException, TechException {
		try {
			if ((sendQE = peekSQ()) == null)
				return;

			if (logTraceEnabled())
				logTrace("sendQE has " + sendQE.getMessageCount()
						+ " messages.");

			while (true) {
				if (sendQE.getMessageCount() == 0) {
					pollSQ();
					break;
				}

				Message msg = sendQE.getMessage(0);
				if (msg != null) {
					conn.getSender().send(msg);
					if (logDebugEnabled()) {
						String log = MessageLogger.toDebugingLog("sent", this,
								msg);
						if (log != null)
							logDebug(log);
					}
				}

				if (sendQE.getMessageCount() > 0)
					sendQE.removeMessage(0);

				if (sendQE.getMessageCount() == 0)
					pollSQ();

				if (msg != null) {
					if (sendQE.getSentTriggerClass() != null) {
						try {
							SentTrigger trigger = (SentTrigger) MsgRouter
									.getInstance()
									.getBeanCache()
									.getBean(getService(), this,
											sendQE.getSentTriggerClass());
							if (logDebugEnabled())
								logDebug(SentTrigger.class.getSimpleName()
										+ " "
										+ sendQE.getSentTriggerClass()
												.getName() + " executes.");
							trigger.execute(msg);
						} catch (Throwable t) {
							logError(t);
						}
					}
				}
			}
		} catch (IOException e) {
			logError(e);
			throw e;
		} catch (TechException e) {
			logError(e);
			throw e;
		} catch (Throwable t) {
			logError(t);
			throw new TechException(t);
		} finally {
			sendQE = null;
		}

	}
}
